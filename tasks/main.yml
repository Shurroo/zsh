---

- name: Fail if not macOS
  fail:
    msg: Must be running macOS
  when:
    - ansible_os_family != 'Darwin'

- name: Register Homebrew install state
  stat:
    path: /usr/local/bin/brew
  register: homebrew_brew

- name: Fail if Homebrew is not installed
  fail:
    msg: No Homebrew at `/usr/local/bin/brew`
  when:
    - not homebrew_brew.stat.exists

- name: Install zsh
  become: false
  homebrew: name=zsh state=latest

- name: Register Zsh executable path
  shell: command -v zsh
  register: zsh_result
  changed_when: false
  failed_when: false

- name: Set default shell
  become: yes
  user:
    name: '{{ user_name }}'
    shell: '{{ zsh_result.stdout }}'
  when: user_name is defined

- name: Register custom source zshrc
  stat:
    path: /Volumes/Shurroo/zsh/.zshrc
  register: custom_source_zshrc

- name: Register default source zshrc
  stat:
    path: ~/.shurroo/roles/zsh/files/.zshrc
  register: default_source_zshrc

- name: Register target zshrc
  stat:
    path: ~/.zshrc
  register: target_zshrc

- name: Print custom source status
  ansible.builtin.debug:
    var: custom_source_zshrc.stat.exists
    verbosity: 2

- name: Print default source status
  ansible.builtin.debug:
    var: default_source_zshrc.stat.exists
    verbosity: 2

- name: Print target status
  ansible.builtin.debug:
    var: target_zshrc.stat.exists
    verbosity: 2

- name: Print overwrite status
  ansible.builtin.debug:
    var: overwrite_zshrc
    verbosity: 2

- name: Print (not target or overwrite) status
  ansible.builtin.debug:
    var: (not target_zshrc.stat.exists or overwrite_zshrc)
    verbosity: 2

- name: Copy custom source zshrc
  become: false
  copy:
    src: /Volumes/Shurroo/zsh/.zshrc
    dest: ~/.zshrc
  when: custom_source_zshrc.stat.exists and 
        (not target_zshrc.stat.exists or overwrite_zshrc)
  register: copy_custom_result

- name: Copy default source zshrc
  become: false
  copy:
    src: ~/.shurroo/roles/zsh/files/.zshrc
    dest: ~/.zshrc
  when: not copy_custom_result is succeeded and default_source_zshrc.stat.exists and 
        (not target_zshrc.stat.exists or overwrite_zshrc)

- name: Log results
  template:
    src: zsh.log.j2
    dest: $HOME/.shurroo/log/zsh-{{ log_time }}.log
  when: write_log_file
  changed_when: false

- name: Register log status
  # Set to "log_no.txt" message in vars
  # Change to "log_yes.txt" message when write_log_file
  set_fact: log_status="log_yes.txt"
  when: write_log_file
  changed_when: false

- name: Register next steps
  # Set to "ready_no.txt" message in vars
  # Change to "ready_yes.txt" message when all conditions are met
  set_fact: next_steps="ready_yes.txt"
  when: user_name is defined

- name: Next steps
  debug:
    msg: "{{ lookup('file', log_status, rstrip=false) }}{{ lookup('file', next_steps, rstrip=false) }}"

...
